name: Deploy to EC2

# main branch push 하기
on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install SSH client
      run: sudo apt-get install -y openssh-client

    - name: Add SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/franding.pem
        chmod 600 ~/.ssh/franding.pem
  
    - name: Add EC2 host to known_hosts
      run: |
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
    
    - name: Deploy to EC2 and install Docker
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: 'ap-northeast-2'
        EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
      run: |
        ssh -i ~/.ssh/franding.pem ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
          sudo apt-get update -y
          sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          sudo apt-get update -y
          sudo apt-get install -y docker-ce
          sudo usermod -aG docker $USER
          sudo systemctl enable docker
          sudo systemctl start docker          
        EOF

    - name: git clone 
      run: |
        ssh -i ~/.ssh/franding.pem ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
          if [ -d "/home/ubuntu/2024_franding_project_-" ]; then
            echo "Directory exists. Pulling latest changes..."
            cd /home/ubuntu/2024_franding_project_-
            git pull
          else
            echo "Directory does not exist. Cloning repository..."
            git clone https://github.com/SinMoonGh/2024_franding_project_-.git
          fi
        EOF

    - name: nginx Dockerfile 생성하기
      run: |
        ssh -i ~/.ssh/franding.pem ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
          # nginx 폴더 생성
          mkdir -p ~/nginx

          # Copy Dockerfile and necessary files
          cat <<EOT > ~/nginx/Dockerfile
          # 베이스 이미지로 Nginx 사용
          FROM nginx:latest

          # Nginx 설정 파일 복사 (옵션)
          # 만약 커스텀 설정 파일을 사용하려면, 아래와 같이 설정 파일을 복사합니다.
          COPY nginx.conf /etc/nginx/conf.d/default.conf

          # 기본 HTML 파일 복사 (옵션)
          # 만약 커스텀 웹 페이지를 사용하려면, 아래와 같이 파일을 복사합니다.
          # COPY index.html /usr/share/nginx/html/index.html

          # 포트 80 노출
          EXPOSE 80
          EOT
        EOF

    - name: nginx.conf 파일 생성하기
      run: |
        ssh -i ~/.ssh/franding.pem ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
          # Copy nginx.conf and necessary files
          cat <<EOT > ~/nginx/nginx.conf
          server {
              listen 80;

              location / {
                  proxy_pass http://franding-container:8000;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          }
          EOT
        EOF

    - name: nginx 이미지 빌드하기
      run: |
        ssh -i ~/.ssh/franding.pem ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
          cd ~/nginx

          # nginx 이미지가 이미 존재하는지 확인
          if sudo docker image inspect my-nginx-image > /dev/null 2>&1; then
            echo "Docker image already exists. Skipping build."
          else
            sudo docker build -t franding-nginx-img:latest .  
          fi        
        EOF

    - name: nginx 컨테이너 실행하기
      run: |
        ssh -i ~/.ssh/franding.pem ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
          # Stop existing container if running
          sudo docker stop franding-nginx-img || true

          # Remove existing container if exists
          sudo docker rm franding-nginx-img || true

          # Run Docker container
          sudo docker run -d -p 80:80 --name franding-nginx-container franding-nginx-img
        EOF